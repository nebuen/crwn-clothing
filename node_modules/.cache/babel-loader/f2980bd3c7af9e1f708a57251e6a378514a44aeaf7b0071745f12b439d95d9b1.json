{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n//////\n/////\n/////\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCcBqd88zi4VqaV276FaDSo7zubZyyLrD0\",\n  authDomain: \"crwn-clothing-db-a5732.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a5732\",\n  storageBucket: \"crwn-clothing-db-a5732.appspot.com\",\n  messagingSenderId: \"575163198086\",\n  appId: \"1:575163198086:web:06b1a80931073806887f07\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n// Dahil google lang ang kinuha natin authentication service\n//\n\n// The prompt parameter determines the behavior of the Google sign-in prompt.\n//By setting it to \"select_account\", the prompt will always ask the user\n//to select their account, ensuring that they are prompted to choose an\n//account even if they have previously signed in.\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// Sign in with Google using pop-up\n// The reason for this is that by using a named function,\n// signInWithGooglePopup, you can \"\"\"export\"\"\" it as a separate function\n// from the module, allowing other parts of your code to import and use it.\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n// instantiate the firestore para magamit ung doc,getdoc at setdoc\nexport const db = getFirestore();\n\n// this is a method/ function\n// getting from the authentication service(google), and then\n// we're going to store that inside of firestore online\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  // kuha and database or db, then users is ung 'collections' next is ung uid\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  //console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  // console.log(userSnapshot);\n  // console.log(userSnapshot.exists());\n\n  // if user data does not exists\n  // create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  // return userDocRef\n  return userDocRef;\n  // if user data exist\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/normanebuen/VScodeProject/crwn-clothing/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n//////\n/////\n/////\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCcBqd88zi4VqaV276FaDSo7zubZyyLrD0\",\n  authDomain: \"crwn-clothing-db-a5732.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a5732\",\n  storageBucket: \"crwn-clothing-db-a5732.appspot.com\",\n  messagingSenderId: \"575163198086\",\n  appId: \"1:575163198086:web:06b1a80931073806887f07\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n// Dahil google lang ang kinuha natin authentication service\n//\n\n// The prompt parameter determines the behavior of the Google sign-in prompt.\n//By setting it to \"select_account\", the prompt will always ask the user\n//to select their account, ensuring that they are prompted to choose an\n//account even if they have previously signed in.\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n// Sign in with Google using pop-up\n// The reason for this is that by using a named function,\n// signInWithGooglePopup, you can \"\"\"export\"\"\" it as a separate function\n// from the module, allowing other parts of your code to import and use it.\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n// instantiate the firestore para magamit ung doc,getdoc at setdoc\nexport const db = getFirestore();\n\n// this is a method/ function\n// getting from the authentication service(google), and then\n// we're going to store that inside of firestore online\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  if (!userAuth) return;\n  // kuha and database or db, then users is ung 'collections' next is ung uid\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  //console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  // console.log(userSnapshot);\n  // console.log(userSnapshot.exists());\n\n  // if user data does not exists\n  // create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  // return userDocRef\n  return userDocRef;\n  // if user data exist\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,QACzB,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACtE;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMQ,cAAc,GAAG,IAAId,kBAAkB,CAAC,CAAC;AAC/Cc,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KACnCnB,eAAe,CAACkB,IAAI,EAAEH,cAAc,CAAC;AACvC,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KACtCrB,kBAAkB,CAACmB,IAAI,EAAEH,cAAc,CAAC;AAC1C;AACA,OAAO,MAAMM,EAAE,GAAGlB,YAAY,CAAC,CAAC;;AAEhC;AACA;AACA;AACA,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,IAAI,CAACA,QAAQ,EAAE;EACf;EACA,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EACjD;EACA,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAU,CAAC;EAC7C;EACA;;EAEA;EACA;;EAEA,IAAI,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGN,QAAQ;IACvC,MAAMO,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAI;MACF,MAAMzB,MAAM,CAACkB,UAAU,EAAE;QACvBI,WAAW;QACXC,KAAK;QACLC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IACvD;EACF;EACA;EACA,OAAOX,UAAU;EACjB;AACF,CAAC;;AAED,OAAO,MAAMY,kCAAkC,GAAG,MAAAA,CAAOP,KAAK,EAAEQ,QAAQ,KAAK;EAC3E,IAAI,CAACR,KAAK,IAAI,CAACQ,QAAQ,EAAE;EAEzB,OAAO,MAAMnC,8BAA8B,CAACgB,IAAI,EAAEW,KAAK,EAAEQ,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}