{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n//////\n/////\n/////\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCcBqd88zi4VqaV276FaDSo7zubZyyLrD0\",\n  authDomain: \"crwn-clothing-db-a5732.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a5732\",\n  storageBucket: \"crwn-clothing-db-a5732.appspot.com\",\n  messagingSenderId: \"575163198086\",\n  appId: \"1:575163198086:web:06b1a80931073806887f07\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n// Dahil google lang ang kinuha natin authentication service\n//\n\n// The prompt parameter determines the behavior of the Google sign-in prompt.\n//By setting it to \"select_account\", the prompt will always ask the user\n//to select their account, ensuring that they are prompted to choose an\n//account even if they have previously signed in.\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\n// Sign in with Google using pop-up\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n// The reason for this is that by using a named function,\n// signInWithGooglePopup, you can export it as a separate function\n// from the module, allowing other parts of your code to import and use it.\n\n// instantiate the firestore para magamit ung doc,getdoc at setdoc\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  // kuha and database or db, then users is ung 'collections' next is ung uid\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot"],"sources":["/Users/normanebuen/VScodeProject/crwn-clothing/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n//////\n/////\n/////\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCcBqd88zi4VqaV276FaDSo7zubZyyLrD0\",\n  authDomain: \"crwn-clothing-db-a5732.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a5732\",\n  storageBucket: \"crwn-clothing-db-a5732.appspot.com\",\n  messagingSenderId: \"575163198086\",\n  appId: \"1:575163198086:web:06b1a80931073806887f07\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n// Dahil google lang ang kinuha natin authentication service\n//\n\n// The prompt parameter determines the behavior of the Google sign-in prompt.\n//By setting it to \"select_account\", the prompt will always ask the user\n//to select their account, ensuring that they are prompted to choose an\n//account even if they have previously signed in.\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\n// Sign in with Google using pop-up\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n// The reason for this is that by using a named function,\n// signInWithGooglePopup, you can export it as a separate function\n// from the module, allowing other parts of your code to import and use it.\n\n// instantiate the firestore para magamit ung doc,getdoc at setdoc\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  // kuha and database or db, then users is ung 'collections' next is ung uid\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,QACb,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACtE;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAc,CAAC;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMQ,QAAQ,GAAG,IAAIb,kBAAkB,CAAC,CAAC;AACzCa,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGnB,OAAO,CAAC,CAAC;AAC7B;AACA,OAAO,MAAMoB,qBAAqB,GAAGA,CAAA,KAAMlB,eAAe,CAACiB,IAAI,EAAEH,QAAQ,CAAC;AAC1E;AACA;AACA;;AAEA;AACA,OAAO,MAAMK,EAAE,GAAGjB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D;EACA,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAMtB,MAAM,CAACkB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;AAC3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}